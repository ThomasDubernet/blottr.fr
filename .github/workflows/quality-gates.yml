name: Quality Gates

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'inertia/**'
      - 'tests/**'
      - 'package.json'
      - 'vite.config.ts'
      - 'tailwind.config.js'
  push:
    branches: [main]
    paths:
      - 'inertia/**'
      - 'tests/**'

env:
  NODE_VERSION: '20'

jobs:
  pre-implementation:
    name: Pre-Implementation Gates
    runs-on: ubuntu-latest
    outputs:
      should_continue: ${{ steps.gate_check.outputs.continue }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check dependency security
        run: npm audit --audit-level high

      - name: Check for outdated dependencies
        run: |
          OUTDATED_COUNT=$(npm outdated --json | jq '. | length' || echo "0")
          echo "Outdated packages: $OUTDATED_COUNT"
          if [ "$OUTDATED_COUNT" -gt 20 ]; then
            echo "⚠️ Too many outdated packages ($OUTDATED_COUNT)"
            exit 1
          fi

      - name: TypeScript compilation check
        run: npm run typecheck

      - name: Linting check
        run: npm run lint

      - name: Build process validation
        run: npm run build

      - name: Set gate result
        id: gate_check
        run: echo "continue=true" >> $GITHUB_OUTPUT

  development:
    name: Development Phase Gates
    runs-on: ubuntu-latest
    needs: pre-implementation
    if: needs.pre-implementation.outputs.should_continue == 'true'

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: blottr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DB_CONNECTION=pg" >> .env.test
          echo "PG_HOST=localhost" >> .env.test
          echo "PG_PORT=5432" >> .env.test
          echo "PG_USER=postgres" >> .env.test
          echo "PG_PASSWORD=password" >> .env.test
          echo "PG_DB_NAME=blottr_test" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run database migrations
        run: node ace migration:run --env=test

      - name: Run test suite
        run: npm test

      - name: Test coverage check
        run: |
          if npm run test:coverage; then
            echo "✅ Coverage check passed"
          else
            echo "⚠️ Coverage check not available or failed"
          fi

      - name: Component standards validation
        run: |
          # Check for proper component exports
          EXPORT_COUNT=$(find inertia -name "*.tsx" -o -name "*.ts" | xargs grep -l "export default" | wc -l)
          echo "Components with default exports: $EXPORT_COUNT"

          # Check for TypeScript strict compliance
          if find inertia -name "*.tsx" -o -name "*.ts" | xargs grep -l "any" | head -1; then
            echo "⚠️ Found 'any' types in components - consider stronger typing"
          fi

  integration:
    name: Integration Gates
    runs-on: ubuntu-latest
    needs: [pre-implementation, development]
    if: needs.pre-implementation.outputs.should_continue == 'true'

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: blottr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium firefox webkit

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DB_CONNECTION=pg" >> .env.test
          echo "PG_HOST=localhost" >> .env.test
          echo "PG_PORT=5432" >> .env.test
          echo "PG_USER=postgres" >> .env.test
          echo "PG_PASSWORD=password" >> .env.test
          echo "PG_DB_NAME=blottr_test" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "PORT=3333" >> .env.test

      - name: Run database migrations
        run: node ace migration:run --env=test

      - name: Build application
        run: npm run build

      - name: Start application server
        run: |
          npm start &
          sleep 10
          # Wait for server to be ready
          for i in {1..30}; do
            if curl -f http://localhost:3333 >/dev/null 2>&1; then
              echo "Server is ready"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done

      - name: SSR compatibility test
        run: |
          RESPONSE=$(curl -s http://localhost:3333)
          if echo "$RESPONSE" | grep -q "<!DOCTYPE html>"; then
            echo "✅ SSR rendering working"
          else
            echo "❌ SSR rendering failed"
            exit 1
          fi

      - name: Bundle size validation
        run: |
          # Check if build produced reasonable bundle sizes
          if [ -d "build" ]; then
            BUNDLE_SIZE=$(find build -name "*.js" -exec wc -c {} + | tail -1 | awk '{print $1}')
            MAX_SIZE=$((500 * 1024))  # 500KB

            echo "Bundle size: $BUNDLE_SIZE bytes"
            if [ "$BUNDLE_SIZE" -lt "$MAX_SIZE" ]; then
              echo "✅ Bundle size within limits"
            else
              echo "❌ Bundle size too large: $BUNDLE_SIZE bytes (limit: $MAX_SIZE bytes)"
              exit 1
            fi
          else
            echo "⚠️ Build directory not found"
          fi

      - name: Cross-browser integration tests
        run: npm run test:integration
        timeout-minutes: 10

      - name: Mobile responsiveness tests
        run: |
          # Run mobile-specific tests
          echo "Running mobile responsiveness validation..."
          # This would run specific mobile tests with Playwright

  accessibility:
    name: Accessibility Validation
    runs-on: ubuntu-latest
    needs: [pre-implementation, development]
    if: needs.pre-implementation.outputs.should_continue == 'true'

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: blottr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DB_CONNECTION=pg" >> .env.test
          echo "PG_HOST=localhost" >> .env.test
          echo "PG_PORT=5432" >> .env.test
          echo "PG_USER=postgres" >> .env.test
          echo "PG_PASSWORD=password" >> .env.test
          echo "PG_DB_NAME=blottr_test" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "PORT=3333" >> .env.test

      - name: Run database migrations
        run: node ace migration:run --env=test

      - name: Start application server
        run: |
          npm start &
          sleep 10
          # Wait for server to be ready
          for i in {1..30}; do
            if curl -f http://localhost:3333 >/dev/null 2>&1; then
              echo "Server is ready"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done

      - name: Run accessibility tests
        run: npm run test:accessibility
        timeout-minutes: 15

      - name: Pa11y accessibility audit
        run: |
          # Run pa11y against key pages
          echo "Running pa11y accessibility audit..."
          npx pa11y http://localhost:3333 --standard WCAG2AA --reporter cli

      - name: Upload accessibility report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-report
          path: accessibility-report.*

  performance:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: [pre-implementation, development]
    if: needs.pre-implementation.outputs.should_continue == 'true'

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: blottr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DB_CONNECTION=pg" >> .env.test
          echo "PG_HOST=localhost" >> .env.test
          echo "PG_PORT=5432" >> .env.test
          echo "PG_USER=postgres" >> .env.test
          echo "PG_PASSWORD=password" >> .env.test
          echo "PG_DB_NAME=blottr_test" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "PORT=3333" >> .env.test

      - name: Run database migrations
        run: node ace migration:run --env=test

      - name: Start application server
        run: |
          npm start &
          sleep 10
          # Wait for server to be ready
          for i in {1..30}; do
            if curl -f http://localhost:3333 >/dev/null 2>&1; then
              echo "Server is ready"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done

      - name: Run performance tests
        run: npm run test:performance
        timeout-minutes: 20

      - name: Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun --config=.lighthouserc.json || echo "Lighthouse config not found, skipping"

  production-readiness:
    name: Production Readiness Gates
    runs-on: ubuntu-latest
    needs: [integration, accessibility, performance]
    if: always() && needs.pre-implementation.outputs.should_continue == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Documentation completeness check
        run: |
          DOCS_COUNT=$(find . -name "*.md" -not -path "*/node_modules/*" | wc -l)
          echo "Documentation files found: $DOCS_COUNT"

          if [ "$DOCS_COUNT" -lt 3 ]; then
            echo "⚠️ Limited documentation found"
          else
            echo "✅ Documentation appears complete"
          fi

      - name: Environment configuration check
        run: |
          if [ -f ".env.example" ]; then
            echo "✅ Environment configuration template exists"
          else
            echo "⚠️ Environment configuration template missing"
          fi

      - name: Security configuration validation
        run: |
          # Check for common security configurations
          if grep -r "x-frame-options\|content-security-policy" config/ || \
             grep -r "helmet\|shield" package.json; then
            echo "✅ Security headers configuration found"
          else
            echo "⚠️ Security headers configuration not clearly defined"
          fi

      - name: Generate quality report
        run: |
          echo "Quality Gates Summary" > quality-summary.md
          echo "=====================" >> quality-summary.md
          echo "" >> quality-summary.md
          echo "- Pre-implementation: ${{ needs.pre-implementation.result }}" >> quality-summary.md
          echo "- Development: ${{ needs.development.result }}" >> quality-summary.md
          echo "- Integration: ${{ needs.integration.result }}" >> quality-summary.md
          echo "- Accessibility: ${{ needs.accessibility.result }}" >> quality-summary.md
          echo "- Performance: ${{ needs.performance.result }}" >> quality-summary.md
          echo "" >> quality-summary.md
          echo "Generated: $(date)" >> quality-summary.md

      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-gates-report
          path: |
            quality-summary.md
            quality-reports/

  notify-results:
    name: Quality Gates Results
    runs-on: ubuntu-latest
    needs:
      [
        pre-implementation,
        development,
        integration,
        accessibility,
        performance,
        production-readiness,
      ]
    if: always()

    steps:
      - name: Check quality gate results
        run: |
          echo "Quality Gates Results Summary:"
          echo "================================"
          echo "Pre-implementation: ${{ needs.pre-implementation.result }}"
          echo "Development: ${{ needs.development.result }}"
          echo "Integration: ${{ needs.integration.result }}"
          echo "Accessibility: ${{ needs.accessibility.result }}"
          echo "Performance: ${{ needs.performance.result }}"
          echo "Production Readiness: ${{ needs.production-readiness.result }}"

          # Determine overall status
          if [[ "${{ needs.pre-implementation.result }}" == "failure" ]] || \
             [[ "${{ needs.development.result }}" == "failure" ]] || \
             [[ "${{ needs.integration.result }}" == "failure" ]]; then
            echo "Overall Status: ❌ FAILED"
            exit 1
          elif [[ "${{ needs.accessibility.result }}" == "failure" ]] || \
               [[ "${{ needs.performance.result }}" == "failure" ]]; then
            echo "Overall Status: ⚠️ WARNING - Non-blocking failures"
            exit 0
          else
            echo "Overall Status: ✅ PASSED"
            exit 0
          fi
